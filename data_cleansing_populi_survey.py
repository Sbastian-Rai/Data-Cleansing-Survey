# -*- coding: utf-8 -*-
"""DATA CLEANSING_POPULI SURVEY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qW0U5mTkt5xFtUIe_okzmZPRPFu7_huN

# DATA CLEANSING [POPULI CENTER'S SURVEY]

Sumber Data dalam proyek ini adalah hasil survey nasional dari Lembaga Populi Center pada Bulan Juni 2023.

# TAHAP 1: MENGIMPOR LIBRARY DAN MEMBACA DATABASE
"""

# IMPORT NEEDED LIBRARY
import pandas as pd

#LOADING DATA
df_surnas = pd.read_excel("/content/drive/MyDrive/surnas juni 2023.xlsx")

#CHECKING THE DATA
df_surnas = pd.DataFrame(df_surnas)

#MENGOPI DATAFRAME
df_surnas_copied = df_surnas.copy()
df_surnas_copied.info()

"""# TAHAP 2: DATA CLEANING"""



"""# A. Kesesuaian nomor kuesioner dengan jenis kelamin"""

#Mengecek (GANJIL)(LAKI-LAKI)

#Mengecek apakah ada nomor kuesioner ganjil yang berjenis kelamin perempuan
gender_1 = df_surnas_copied[(df_surnas_copied['NO KUISIONER'] % 2 != 0) & (df_surnas_copied['JENIS KELAMIN'] == 'Perempuan')]

gender_1.loc[:, ['NO KUISIONER', 'JENIS KELAMIN']]
#Ada 4 data yang tidak sesuai yakni nomor kuisioner: 107, 109, 1047, 1169

#Jika ingin MENGUBAH jenis kelaminnya menjadi laki-laki

#Buat daftar index dari sel yang ingin diubah
ix_gender_1 = [100, 102, 1010, 1126]

#Buat iterasi untuk menampung range panjang dari jumlah index
#Dimana tiap nilai dari range akan diconvert menjadi 'Laki-laki'
nv_g1 = [] #nv_g1 singkatan untuk new value for gender 1
for i in range(len(ix_gender_1)):
  i = 'Laki-laki'
  nv_g1.append(i)

#Mengupdate nilai cell dari index yang sudah di-listing
df_surnas_copied.loc[ix_gender_1, 'JENIS KELAMIN'] = nv_g1

#Menampilkan perubahan (preview)
df_surnas_copied.loc[ix_gender_1, ['NO KUISIONER', 'JENIS KELAMIN']]

#Mengecek (GENAP)(PEREMPUAN)

#Mengecek apakah ada nomor kuesioner genap yang berjenis kelamin laki-laki
gender_2 = df_surnas_copied[(df_surnas_copied['NO KUISIONER'] % 2 == 0) & (df_surnas_copied['JENIS KELAMIN'] == 'Laki-laki')]

gender_2.loc[:, ['NO KUISIONER', 'JENIS KELAMIN']]
#Ada 1 data yang tidak sesuai yakni nomor kuisioner: 71052

#Jika ingin MENGUBAH jenis kelaminnya menjadi perempuan

#Membuat daftar index dari sel yang ingin diubah
ix_gender_2 = [1288]

#Membuat iterasi untuk menampung range panjang dari jumlah index
#Dimana tiap nilai dari range akan diconvert menjadi 'Perempuan'
nv_g2 = [] #nv_g1 singkatan untuk new value for gender 2
for j in range(len(ix_gender_2)):
  j = 'Perempuan'
  nv_g2.append(j)

#Mengupdate nilai cell dari index yang sudah di-listing
df_surnas_copied.loc[ix_gender_2, 'JENIS KELAMIN'] = nv_g2

#Menampilkan perubahan (preview)
df_surnas_copied.loc[ix_gender_2, ['NO KUISIONER', 'JENIS KELAMIN']]

"""# B. Outlier Umur dan Coding Umur"""

#Mencari Outlier umur, yakni umur yang berusia lebih dari 100 tahun
age = df_surnas_copied[df_surnas_copied['UMUR'] > 100]

#Menampilkan outlier umur
age.loc[:, ['NAMA RESPONDEN', 'UMUR']]

#Mengubah outlier umur dengan ketentuan
    #Umur 821 menjadi 82, Umur 470 menjadi 47
ix_age = [662, 1046] #Melisting index outlier umur

nv_outlier_age = [82, 47] #Menginput nilai baru untuk outlier

#Mengupdate nilai cell dari index yang sudah di-listing
df_surnas_copied.loc[ix_age, 'UMUR'] = nv_outlier_age

#Menampilkan perubahan (preview)
df_surnas_copied.loc[ix_age, ['NAMA RESPONDEN', 'UMUR']]

"""Coding Milenial"""

#Menambahkan kolom Coding Milenial dengan ketentuan:
  # Nilai 1 untuk <= 35, dan 2 unutk > 35
Coding_Milenial = df_surnas_copied['UMUR'].apply(lambda x: 1 if x <= 35 else 2)

#Dirun sekali untuk menghindari duplikasi
  #insert(index, nama, list of value)
df_surnas_copied.insert(27, "Coding_Milenial", Coding_Milenial, allow_duplicates=False)

#Preview kolom Coding_Milenial
df_surnas_copied.iloc[:, 20:30].sample(10)



"""# C. Coding Pulau"""

#Menambahkan kolom Coding Pulau dengan ketentuan:
  #Mendefinisikan ketentuan area
area_1 = ['ACEH', 'SUMATERA BARAT', 'RIAU', 'JAMBI',
       'KEPULAUAN BANGKA BELITUNG', 'KEPULAUAN RIAU', 'SUMATERA UTARA',
       'SUMATERA SELATAN', 'BENGKULU', 'LAMPUNG']
area_2 = ['DKI JAKARTA', 'JAWA BARAT', 'BANTEN']
area_3 = ['DI YOGYAKARTA', 'JAWA TIMUR', 'JAWA TENGAH']

  #Membuat fungsi coding area
def area_coding (x):
  if x in area_1:
    return 1
  elif x in  area_2:
    return 2
  elif x in area_3:
    return 3
  else:
    return 4

#Melisting applied value untuk kolom Coding_Pulau
Coding_Pulau = df_surnas_copied['PROVINSI'].apply(lambda x: area_coding(x))

#Dirun sekali untuk menghindari duplikasi
  #insert(index, nama kolom, value)
# df_surnas_copied.insert(13, "Coding_Pulau", Coding_Pulau, allow_duplicates=False)

#Preview kolom Coding_Pulau
df_surnas_copied.iloc[:, 10:15].sample(10)

"""# D. MENGUBAH NILAI (.)"""

#Melisting seluruh kolom
list_col = list(df_surnas_copied.columns)

list_col

#Mmebuat iterasi untuk mengubah semua nilai di kolom x yang bernilai '.' menjadi ''
for col in list_col:
  df_surnas_copied[col].replace('.', '', inplace =True)

#Preview perubahan nilai (.)
df_surnas_copied.loc[:, ['P5X', 'P6X', 'P13X', 'P14X', 'P18.2.2']].sample(5)

"""# E. CLEANING JAWABAN LAINNYA

List pertanyaan dengan jawaban lainnya:
3, 5, 6, 13, 14, 15, 23, 27, 36, 59, 76, 77, 79, 80, 86, 87, 90, 93, 94, 95, 98

Contoh Cleaning akan dilakukan untuk pertanyaan 3 (P3X)
"""

#Mengopi dataframe:
df_surnas_cleaned1 = df_surnas_copied.copy(deep=True)

#Mengambil nilai unique dari jawaban lainnya:
df_surnas_cleaned1['P3X'].unique()

#Menghitung panjang nilai unik
# len(df_surnas_copied['P3X'].unique())
#Output: 68

#membuat list yang menampung array dari kolom P3X
list_p3x = list(df_surnas_cleaned1['P3X'].unique())
# list_p3x
# len(list_p3x)

#Membuat listing untuk kategori yang sama:
pendidikan = ['BIAYA SEKOLAH', 'BIAYA SEKOLAH ,LISTRIK', 'BIAYA SEKOLAH ANAK','BIAYA ANAK SEKOLAH', 'BIYAYA PENDIDIKAN',
              'BIAYA KULIAH ANAK', 'SEKOLAH', 'PENDIDIKAN', 'PENDIDIKAN SEKOLAH ANAK', 'BIAYA PENDIDIKAN', 'PENDIDIKAN ANAK',
              'UANG SAKU ANAN', 'JAJAN ANAK','BIAYA PENDIDIKAN ANAK', 'KULIAH ANAK',  'KEPERLUAN SEKOLAH']

cicilan_beban_produktif = ['CICILAN MOTOR', 'CICILAN BANK','CICILAN UNTUK USAHA KEBUN DI BANK','CICILAN HUTANG',
                           'PENGEMBANGAN BISNIS', 'CICILAN KE BANK AGRO', 'CICILAN BANK EMOK', 'ANGSURAN BANK',
                           'PUPUK', 'BANGUN RUMAH', 'ANGSURAN', 'CICILAN BANK KREDIT', 'CICILAN PINJAMAN UANG',
                           'PUPUK KOMPOS BAHAN TANI',  'CICILAN SEPEDA MOTOR', 'CICILAN',  'PUPUK , OBAT', 'PUPUK TANI',
                            'ANGSURAN MOTOR', 'CICILAN MOBIL', 'CICILAN KENDARAAN', 'BAYAR CICILAN TANAH','PUPUK DAN OBAT2AN TANAMAN' ]

rekreasi_arisan = ['ARISAN','KEGIATAN KELUARGA BESAR (REWANG ATAU GOTONG ROYONG PESTA TETANGGA)','SKINCARE', 'ROKOK', 'ROKOK SAMA MAKAN',
                   'KONDANGAN', 'KONDNGAN', 'ARISAN DAN UTANG', 'GAYA HIDUP', 'BAYAR ARISAN','UNDANGAN HAJATAN (DITANGGUNG ANAK KEBANYAKAN)',
                   'KONDANGAN, DLL']

air = ['AIR PAM', 'BAYAR AIR', 'AIR', 'KEBUTUHAN AIR','AIR PDAM' ]

kesehatan = ['PENGOBATAN']

transportasi_1 = ['BBM DAN KUOTA INTERNET']

bahan_pokok_3 = ['BELANJA','KEBUTUHAN HARIAN DAN ANAK SEKOLAH']

lainnya = ['TIDAK ADA', 'PEMPES DAN SUSU ANAK','STABIL', 'SUSU', 'TIDAK ADA YANG BERAT', 'PENGELUARAN TAK TERDUGA (KONDANGAN, SELAMATAN, DLL)',
            'BAIK TIDAK ADA YG MEBEBANI', '']

#Menghitung jumlah input
n_lainnya = (len(pendidikan) + len(cicilan_beban_produktif) + len(rekreasi_arisan)
              + len(air) + len(kesehatan) + len(transportasi_1) + len(bahan_pokok_3) + len(lainnya))
#Output= 68 [Semua nilai array sudah terinput]

mapping = {}

for i in list_p3x:
  if i in pendidikan:
    map_1 = {i: "Pendidikan"}
    mapping.update(map_1)
  if i in cicilan_beban_produktif:
    map_2 = {i: "Cicilan/Beban Produktif"}
    mapping.update(map_2)
  if i in rekreasi_arisan:
    map_3 = {i : "Rekreasi/Arisan"}
    mapping.update(map_3)
  if i in air:
    map_4 = {i : "Air"}
    mapping.update(map_4)
  if i in kesehatan:
    map_5 = {i : "Kesehatan"}
    mapping.update(map_5)
  if i in transportasi_1:
    map_6 = {i : "Transportasi"}
    mapping.update(map_6)
  if i in bahan_pokok_3:
    map_7 = {i : "Bahan Pokok"}
    mapping.update(map_7)
  if i in lainnya:
    map_8 = {i : "Lainnya"}
    mapping.update(map_8)

#Melakukan mapping unutk mengganti nilai array pada kolom P3X menjadi nilai yang dikoding sesuai kategori
df_surnas_cleaned1['P3X'] = df_surnas_cleaned1['P3X'].map(lambda x: mapping.get(x,x))

#Preview nilai unik setelah kategorisasi nilai lainnya
df_surnas_cleaned1['P3X'].unique()

df_surnas_cleaned1.loc[:, ['P3X','P4']].sample(10)

"""# F. JAWABAN TERBUKA

Pertanyaan-pertanyaan dengan jawaban tebruka: 7, 8, 22, 33, 34, 35

Contoh akan dilakukan pada pertanyaan 7 (P7)
"""

# Membuat list nilai unik dari P7
list_p7 = list(df_surnas_cleaned1['P7'].unique())

#Mengurutkan nama
list_p7.sort()

list_p7

#List kategori
anies_baswedan = ['AANIAANIESAANIAANIES BBASBBASWEBBASBBASWEDABBASBBASWEBBASBBASWEDAN', 'ANIS BASWESAN',
                  'ANIS BASWEDAH','ANIES BASWEDAN', 'ANIS BASWEDAN', 'ANIS','ANIES', 'ANIS RASYID BASWEDAN']
prabowo_subianto = ['PROBOWO', 'PEABOWO', 'PRABOWO S', 'PAK PRABOWO','PROBOWO SUBIANTO','PRABOWO','PRABOWO SUBIANTO','PRABOWO SUBIABTO']
ganjar_pranowo = ['PRANOWO', 'GANJAR PRANOMO', 'GANJAR P', 'GANJAR', 'GENJAR PRANOWO', 'GANJAR PRANOWO']
basuki_tp = ['AHOK', 'AHOK(BASUKI CAHAYA PURNAMA)',  'BASUKI TJAJHJA AHOK']
mahfud_md = ['MAHMUD', 'MAHFUD', 'MAHFUD MD']
jokowi_dodo = ['JOKI WIDODO','MASIH PAK JOKOWI', 'JOKO WIDODO', 'JOKOWI', 'JOKI WIDODO', 'JOKOWI DODO', 'JOKOWIDODO']
erick_thohir = ['ERICK THOHIR', 'ERIK THOHIR',  'ERIK TOHIR']
gibran = ['GIBRAN', 'GIBRAN RAKABUMING RAKA', 'GIBRAN RAKABUMING']
ahy = ['AGUS HARIMURTI YUDHOYONO' 'AGUS HARIMURTI YUDHOYONO', 'AGUS HARIMURTI YUDHOYONO']
andika_perkasa = ['ANDIKA', 'ANDIKA PERKASA']
puan_maharani = ['PUAN MAHARANI']
jusuf_kalla = ['JUSUF KALLA']
ari_tani =['ARI TANI']
sandi_uno = ['SANDIAGA UNO']
muhaimin = ['MUHAIMIN ISKANDAR']
hari_tanoe = ['HARI TANOE']
amin_rais = ['AMIN RAIS']
megawati = ['MEGAWATI', 'MEGAWATI']
airlangga = ['AIRLANGGA HARTARTO']
rizieq_shihab = ['RIZIK SIHAP']
ridwan = ['RIDWAN KAMIL']
suryaPaloh = ['SURYA PALOH']

mapping_p7 = {}
for i in list_p7:
  if i in anies_baswedan:
    anies = {i: "ANIES BASWEDAN"}
    mapping_p7.update(anies)
  elif i in prabowo_subianto:
    prabowo = {i :"PRABOWO SUBIANTO"}
    mapping_p7.update(prabowo)
  elif i in ganjar_pranowo:
    ganjar = {i :"GANJAR PRANOWO"}
    mapping_p7.update(ganjar)
  elif i in basuki_tp:
    basuki = {i : "BASUKI TJAHAYA"}
    mapping_p7.update(basuki)
  elif i in mahfud_md:
    mahfud = {i : "MAHFUD MD"}
    mapping_p7.update(mahfud)
  elif i in jokowi_dodo:
    jokowi = {i : "JOKOWI DODO"}
    mapping_p7.update(jokowi)
  elif i in erick_thohir:
    erick = {i : "ERICK THOHIR"}
    mapping_p7.update(erick)
  elif i in gibran:
    gibran_raka = {i : "GIBRAN RAKABUMING RAKA"}
    mapping_p7.update(gibran_raka)
  elif i in ahy:
    agus_hari = {i : "AGUS HARIMURTI YUDHOYONO"}
    mapping_p7.update(agus_hari)
  elif i in andika_perkasa:
    andika = {i : "ANDIKA PERKASA"}
    mapping_p7.update(andika)
  elif i in puan_maharani:
    puan = {i : "PUAN MAHARANI"}
    mapping_p7.update(puan)
  elif i in jusuf_kalla:
    jk = {i : "JUSUF KALLA"}
    mapping_p7.update(jk)
  elif i in ari_tani:
    ari = {i : "ARI TANI"}
    mapping_p7.update(ari)
  elif i in sandi_uno:
    sandi = {i : "SANDIAGA UNO"}
    mapping_p7.update(sandi)
  elif i in muhaimin:
    muhaimin = {i : "MUHAIMIN ISKANDAR"}
    mapping_p7.update(jk)
  elif i in hari_tanoe:
    hari = {i : "HARY TANOE"}
    mapping_p7.update(hari)
  elif i in amin_rais:
    amin = {i : "AMIN RAIS"}
    mapping_p7.update(amin)
  elif i in megawati:
    megawati = {i : "MEGAWATI"}
    mapping_p7.update(megawati)
  elif i in airlangga:
    airlangga = {i : "AIRLANGGA HARTARTO"}
    mapping_p7.update(airlangga)
  elif i in ridwan:
    ridwan = {i : "RIDWAN KAMIL"}
    mapping_p7.update(ridwan)
  elif i in rizieq_shihab:
    rizieq = {i : "RIZIEQ SHIHAB"}
    mapping_p7.update(rizieq)
  elif i in suryaPaloh:
    surya = {i : "SURYA PALOH"}
    mapping_p7.update(surya)
  else:
    lainnya = {i: "BELUM MEMUTUSKAN/TIDAK MENJAWAB"}
    mapping_p7.update(lainnya)

# mapping_p7

#Melakukan mapping untuk mengganti nilai array pada kolom P7 menjadi nilai yang dikoding sesuai kategori
df_surnas_cleaned1['P7'] = df_surnas_cleaned1['P7'].map(lambda x: mapping_p7.get(x,x))

#Preview nilai unik pada nilai kolom P7
df_surnas_cleaned1['P7'].unique()

df_surnas_cleaned1.loc[:, ['P7', 'P8']]

#[[KODE UNTUK MEMBUAT LIST, MENGECEK PANJANG LIST DARI SUATU KOLOM BERDASARKAN NILAI UNIK]]
# list_p33 = list(df_surnas_cleaned1['P80X'].unique())
# list_p33.sort()

# len(list_p33)
# list_p33



"""# G. PERTANYAAN BRANCHING

Sampel contoh:
Jawaban untuk P4: (1-2), P5: (2-11) |
Jawaban untuk P4: (3-6), P5: 1
"""

#Membuat kondisi dimana P4 bernilai kecil dari 2, memiliki jawaban P5 selain 2-11 atau bernilai = 1
branching_1 = df_surnas_cleaned1[(df_surnas_cleaned1['P4'] <=2) & (df_surnas_cleaned1['P5'] == 1)]

#Preview dataframe
branching_1.loc[:, ['P4', 'P5']]
#Ambil nilai index untuk melakukan cleaning di dataframe awal
#Nilai index adalah 156, dan 1216
#Nilai 1 pada jawaban kolom 5, akan diubah nilainya mnejadi 11 (Tidak Tahu/Tidak Jawab)

#Membuat daftar index dari sel yang ingin diubah
ix_branching_1 = [26, 27, 28, 156, 530, 533, 805, 1216]

#Membuat iterasi untuk menampung range panjang dari jumlah index
#Dimana tiap nilai dari range akan diconvert menjadi 11
nv_branching_1 = [] #nv_g1 singkatan untuk new value for branching 1
for b in range(len(ix_branching_1)):
  b = 11
  nv_branching_1.append(b)

#Mengupdate nilai cell dari index yang sudah di-listing
df_surnas_cleaned1.loc[ix_branching_1, 'P5'] = nv_branching_1

#Menampilkan perubahan (preview)
df_surnas_cleaned1.loc[ix_branching_1, ['P4', 'P5']]

